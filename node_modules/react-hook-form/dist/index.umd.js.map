{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    field && field._f && !isUndefined(field._f.value)\n      ? field._f.value\n      : isUndefined(get(defaultValuesRef.current, name))\n      ? defaultValue\n      : get(defaultValuesRef.current, name),\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    const field = get(fieldsRef.current, name);\n\n    if (field && field._f) {\n      field._f._c = true;\n    }\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isNameInFieldArray(namesRef.current.array, name)\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          field._f.mount = false;\n        }\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref) && !_f._c) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value) && !_f._c) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs && !_f._c) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender && _f._c) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setInternalValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  Path,\n  PathValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      (get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name)\n        : get(defaultValuesRef.current, name)) || [],\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}.`\n      : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${\n        parentName ? valueIndex : index + valueIndex\n      }`;\n      isPrimitive(appendValueItem)\n        ? (register as UseFormRegister<TFieldValues>)(\n            rootName as Path<TFieldValues>,\n            {\n              value: appendValueItem as PathValue<\n                TFieldValues,\n                Path<TFieldValues>\n              >,\n            },\n          )\n        : Object.entries(appendValueItem).forEach(([key, value]) => {\n            const inputName = rootName + '.' + key;\n\n            Array.isArray(value)\n              ? registerFieldArray(value, valueIndex, inputName)\n              : (register as UseFormRegister<TFieldValues>)(\n                  inputName as Path<TFieldValues>,\n                  { value },\n                );\n          });\n    });\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name as FieldPath<TFieldValues>);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues &&\n          set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","Object","keys","length","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","props","control","methods","formStateRef","subjectsRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","namesRef","shouldUnmount","inFieldArrayActionRef","field","setInputStateValue","_f","onChange","onBlur","ref","controllerSubscription","values","_c","shouldUnmountField","isNameInFieldArray","array","mount","event","target","isCheckBoxInput","checked","getControllerValue","elm","fieldState","invalid","isTouched","error","validateAllFieldCriteria","message","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","slice","append","fill","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","required","maxLength","minLength","min","max","pattern","validate","inputValue","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","isWindowUndefined","render","Provider","children","focusNameRef","isMountedRef","getIsDirty","updateIsValid","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusFieldName","shouldFocus","focusName","focusIndex","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","registerFieldArray","forEach","appendValueItem","valueIndex","rootName","entries","inputName","watchAll","watchField","watch","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","fieldArrayValues","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","contextRef","Set","unMount","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","isHTMLElement","radioRef","selectRef","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","getResolverOptions","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","Promise","all","fieldName","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","fieldKey","fieldValue","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","getValues","parentNodeName","currentError","watchInternal","isGlobal","isArrayNames","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","registerAbsentFields","useFieldArraySubscription","unregisterFieldNames","isLiveInDom","useMemo","info","setValue","isFieldArray","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","updateValue","watchSubscription"],"mappings":"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"}