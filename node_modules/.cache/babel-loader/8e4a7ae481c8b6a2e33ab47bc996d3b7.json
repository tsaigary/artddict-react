{"ast":null,"code":"var _jsxFileName = \"/Users/Gary 1/Desktop/Code stuff/\\u8CC7\\u7B56\\u6703/\\u5C08\\u984C/\\u5927\\u5C08/artddict-react/src/pages/Auction/components/ThreeJs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Container, Row, Button, Collapse } from 'react-bootstrap';\nimport { withRouter, Link } from 'react-router-dom';\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport OBJLoader from \"three-react-obj-loader\";\nimport MTLLoader from 'three-react-mtl-loader'; // import { MTLLoader, OBJLoader } from 'three-obj-mtl-loader'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ThreeJs(props) {\n  _s();\n\n  useEffect(() => {\n    var OrbitControls = require('three-orbit-controls')(THREE); //點光源必須在外面宣告,這樣滑鼠事件才讀取的到\n\n\n    let Plight; //滑鼠位置\n\n    var mouse = {\n      x: 0,\n      y: 0\n    };\n\n    function main() {\n      const canvas = document.querySelector('#d'); //three3d裡面最優先的渲染器\n\n      const renderer = new THREE.WebGLRenderer({\n        // alpha: true\n        canvas: canvas //背景透明\n        // alpha: true\n\n      }); // document.getElementById('#d').appendChild(#d's.domElement)\n      // https://segmentfault.com/a/1190000015330360\n      //https://blog.csdn.net/qq_24013817/article/details/50410433\n      //啟用陰影   陰影需要大量運算，預設為不啟用陰影功能，所以首先繪製器必須啟用陰影功能。\n\n      renderer.shadowMap.enabled = true; //************************以下在做相機 */\n      //攝像機視錐體垂直視野角度，從視圖的底部到頂部，以角度來表示。默認值是50。\n\n      const fov = 45; //攝像機視錐體的長寬比，通常是使用畫布的寬/畫布的高。默認值是1（正方形畫布）。\n\n      const aspect = 1; // the canvasA default\n      //攝像機的近端面，默認值是0.1。\n\n      const near = 0.1; //far（遠面距離）相機到視景體最遠的距離\n\n      const far = 1000; //創建透視相機\n\n      let camera = new THREE.PerspectiveCamera(fov, aspect, near, far); //透視相機所在的位置 (x,y,z)\n      //紅色,綠色,藍色\n\n      camera.position.set(0, 18, 12); //OrbitControls( object : Camera, domElement : HTMLDOMElement )\n      //object: （必须）将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身。\n      //domElement: 用于事件监听的HTML元素。\n\n      let controls = new OrbitControls(camera, renderer.domElement); //https://blog.csdn.net/ithanmang/article/details/82735273\n      //https://www.itread01.com/content/1541957413.html\n      //設置相機聚焦點\n      //相機在FUNCTION裡面默認設置為\n      //controls.target = new THREE.Vector3(0, 0, 0);\n      //也就是世界的原點\n      //所以如果想要穿過原點 可以改變參數\n\n      controls.target.set(0, 0, 0);\n      controls.enableDamping = true; // 啟用阻尼效果\n\n      controls.dampingFactor = 0.25; // 阻尼系數\n      // controls.autoRotate = true // 啟用自動旋轉 --無用\n      // 更新控制器。必须在摄像机的变换发生任何手动改变后调用\n      // controls.update();\n      //************************以上在做相機 */\n      //創建一個新的背景\n\n      let scene = new THREE.Scene(); //設定背景顏色\n      // scene.background = new THREE.Color('white');\n      //建立坐標軸參考\n\n      let axes = new THREE.AxesHelper(20); // 參數為座標軸長度\n\n      scene.add(axes); //-(暫時隱藏)\n\n      {\n        //**********以下整個部分都在做地板 */\n        //地板大小\n        //在 texture.repeat.set() 呈現\n        const planeSize = 60; //Creates a new TextureLoader.\n\n        const loader = new THREE.TextureLoader(); // 纹理中图像的平铺，仅有当图像大小（以像素为单位）为2的幂（2、4、8、16、32、64、128、256、512、1024、2048、……）时才起作用。 \n        // 宽度、高度无需相等，但每个维度的长度必须都是2的幂。 这是WebGL中的限制，不是由three.js所限制的。\n        //格子紋路的地板是由下面這行匯入的圖片造成\n\n        const texture = loader.load('../—Pngtree—hand painted cartoon pikachu red_3969375.png');\n        texture.wrapS = THREE.RepeatWrapping;\n        texture.wrapT = THREE.RepeatWrapping;\n        texture.magFilter = THREE.NearestFilter; //10/2=5 所以地板總共會有5*10個圖案\n\n        const repeats = planeSize / 2;\n        const repeats1 = planeSize;\n        texture.repeat.set(repeats, repeats1); //此網址有圖解: https://threejs.org/docs/#api/en/geometries/PlaneGeometry\n\n        const planeGeo = new THREE.PlaneGeometry(planeSize, planeSize); //網址參考:https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n        //網址參考:https://ithelp.ithome.com.tw/articles/10192953\n\n        const planeMat = new THREE.MeshPhongMaterial({\n          //這邊匯入地板材質(指定紋理物件)\n          // map: texture,                                                        \n          //如果純粹輸入某種顏色,就使用下面這個方法\n          color: 0x696969,\n          //side 材質要渲染到物件的(後/裡)面BackSide或是(正/外)面FrontSite\n          side: THREE.DoubleSide\n        }); //https://threejs.org/docs/#api/zh/objects/Mesh\n        //new 出一個形狀+外表\n\n        const mesh = new THREE.Mesh(planeGeo, planeMat); //加上陰影\n        // mesh.castShadow = true;\n\n        mesh.receiveShadow = true; //地板水平抑或著垂直\n\n        mesh.rotation.x = Math.PI * -.5;\n        scene.add(mesh); //-(暫時隱藏)\n      } //**********以上整個部分都在做地板 */\n      // 建立物體\n      //創建一個立方體\n\n      const geometry = new THREE.BoxGeometry(1, 1, 1); // 幾何體\n      //創建材質 MeshPhongMaterial屬於一種材質\n\n      const material = new THREE.MeshPhongMaterial({\n        color: 0xfffaaf\n      }); // 材質\n\n      let cube = new THREE.Mesh(geometry, material); // 建立網格物件\n      //發出陰影\n\n      cube.castShadow = true; //承受陰影\n\n      cube.receiveShadow = true;\n      cube.position.set(2, 0.5, 10);\n      scene.add(cube); //-(暫時隱藏)\n      // {\n      //     //材質模版庫格式（英語：Material Template Library，MTL）是 .OBJ 的配套檔案格式\n      //     const mtlLoader = new MTLLoader();\n      //     //箭頭函式 function(mtl){}\n      //     mtlLoader.load('./Statue/statue1/12328_Statue_v1_L2.mtl', (mtl) => {\n      //         //這行不知道幹嘛用的 不過大家都有 先放著\n      //         mtl.preload();\n      //         const objLoader = new OBJLoader();\n      //         // objLoader.position.set(0, 0, 0)\n      //         objLoader.setMaterials(mtl);\n      //         objLoader.load('./Statue/statue1/12328_Statue_v1_L2.obj', (obj) => {\n      //             //雕像尺寸\n      //             // obj.scale.x = .1;\n      //             // obj.scale.y = .1;\n      //             // obj.scale.z = .1;\n      //             //站起來\n      //             obj.rotation.x = -1.5;\n      //             obj.rotation.z = -0.4;\n      //             for (mtl in obj.children) {\n      //                 // console.log('5')\n      //                 obj.children[mtl].castShadow = true;\n      //                 obj.children[mtl].receiveShadow = true;\n      //             }\n      //             console.log(obj)\n      //             scene.add(obj);\n      //             // root.castShadow = true //無法產生陰影\n      //             //移動雕像位置\n      //             // obj.position.z =0;\n      //             // obj.position.x = 6;\n      //         });\n      //     });\n      //     // obj.children[0].scale.set(2, 2, 2);\n      // }\n\n      /*************************************************** */\n      // let mtlLoader = new MTLLoader();\n      // let objLoader = new OBJLoader();\n      // mtlLoader.load('./Statue/statue1/12328_Statue_v1_L2.mtl', (materials) => {\n      //     materials.preload()\n      //     console.log(\"loaded Material\");\n      //     objLoader.setMaterials(materials)\n      //     objLoader.load('./Statue/statue1/12328_Statue_v1_L2.obj', (objecta) => {\n      //         scene.add(objecta)\n      //     })\n      // })\n\n      {\n        //**********以下都在做光源 */\n        const skyColor = 0xB1E1FF; // light blue\n\n        const groundColor = 0xB97A20; // brownish orange\n\n        const intensityA = 1; //網址參考:https://www.hangge.com/blog/cache/detail_1811.html\n        //HemisphereLight 中文 環境光\n        //THREE.HemisphereLight(天空照射下來的顏色,地面發出光線的顏色,光源照射的強度default=1)\n\n        const lightA = new THREE.HemisphereLight(skyColor, groundColor, intensityA); // scene.add(lightA);                                                        \n\n        const color = 0xFFffdd;\n        const intensity = 1; //平行光\n        //new THREE.DirectionalLight(color, intensity,distance,decay);\n\n        const light = new THREE.DirectionalLight(color, intensity);\n        console.log(light); //光源所在的位置\n\n        light.position.set(-30, 10, 5); // light.target.position.set(20, -20, 0); //-無用\n        //控制照射的範圍\n\n        light.shadow.camera.near = 5; //产生阴影的最近距离\n\n        light.shadow.camera.far = 100; //产生阴影的最远距离\n\n        light.shadow.camera.left = -30; //产生阴影距离位置的最左边位置\n\n        light.shadow.camera.right = 30; //最右边\n\n        light.shadow.camera.top = 30; //最上边\n\n        light.shadow.camera.bottom = -30; //加上陰影\n\n        light.castShadow = true; // light.target = cube\n        //平行光輔助線\n\n        let directionalLightHelper = new THREE.DirectionalLightHelper(light);\n        scene.add(directionalLightHelper);\n        scene.add(light);\n        scene.add(light.target); //----------------------- 點光源\n\n        Plight = new THREE.PointLight(0xffffff);\n        Plight.position.set(0, 5, 5);\n        Plight.castShadow = true;\n        scene.add(Plight); //點光源輔助線\n\n        let PointLight = new THREE.PointLightHelper(Plight); // scene.add(PointLight)\n\n        document.addEventListener('mousemove', onMouseMove, false);\n      } //**********以上都在做光源 */\n      //------以下滑鼠移動 \n      //https://ithelp.ithome.com.tw/articles/10198838\n\n      function onMouseMove(event) {\n        //https://ithelp.ithome.com.tw/articles/10198999\n        // Update the mouse variable\n        console.log(event);\n        event.preventDefault();\n        mouse.x = event.clientX / window.innerWidth * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1; // Make the sphere follow the mouse\n\n        var vector = new THREE.Vector3(mouse.x, mouse.y, -0.5);\n        vector.unproject(camera);\n        var dir = vector.sub(camera.position).normalize();\n        var distance = -camera.position.z / dir.z;\n        var pos = camera.position.clone().add(dir.multiplyScalar(distance)); // console.log(pos);\n\n        Plight.position.copy(new THREE.Vector3(pos.x, pos.y, pos.z + 10));\n      }\n\n      ; //------以上滑鼠移動\n      //-\n\n      function resizeRendererToDisplaySize(renderer) {\n        const asas = renderer.domElement;\n        const width = asas.clientWidth;\n        const height = asas.clientHeight;\n        const needResize = asas.width !== width || asas.height !== height;\n\n        if (needResize) {\n          renderer.setSize(width, height, false);\n        }\n\n        return needResize;\n      } //- \n\n\n      function render() {\n        if (resizeRendererToDisplaySize(renderer)) {\n          const vvvvvv = renderer.domElement;\n          camera.aspect = vvvvvv.clientWidth / vvvvvv.clientHeight;\n          camera.updateProjectionMatrix();\n        } //控制自動旋轉\n\n\n        controls.update();\n        renderer.render(scene, camera);\n        requestAnimationFrame(render);\n      }\n\n      requestAnimationFrame(render);\n    }\n    /***************************************************************************** */\n    // var geometry = new THREE.BoxGeometry(1, 1, 1);\n    // var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    // var cube = new THREE.Mesh(geometry, material);\n    // scene.add(cube);\n    // camera.position.z = 5;\n    // var animate = function () {\n    //     requestAnimationFrame(animate);\n    //     cube.rotation.x += 0.05;\n    //     cube.rotation.y += 0.05;\n    //     renderer.render(scene, camera);\n    // };\n    // animate();\n\n    /***************************************************************************** */\n\n\n    main();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"d\",\n        className: \"threestatus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(ThreeJs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ThreeJs;\nexport default ThreeJs;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThreeJs\");","map":{"version":3,"sources":["/Users/Gary 1/Desktop/Code stuff/資策會/專題/大專/artddict-react/src/pages/Auction/components/ThreeJs.js"],"names":["React","useEffect","useState","useRef","Container","Row","Button","Collapse","withRouter","Link","ReactDOM","THREE","OBJLoader","MTLLoader","ThreeJs","props","OrbitControls","require","Plight","mouse","x","y","main","canvas","document","querySelector","renderer","WebGLRenderer","shadowMap","enabled","fov","aspect","near","far","camera","PerspectiveCamera","position","set","controls","domElement","target","enableDamping","dampingFactor","scene","Scene","axes","AxesHelper","add","planeSize","loader","TextureLoader","texture","load","wrapS","RepeatWrapping","wrapT","magFilter","NearestFilter","repeats","repeats1","repeat","planeGeo","PlaneGeometry","planeMat","MeshPhongMaterial","color","side","DoubleSide","mesh","Mesh","receiveShadow","rotation","Math","PI","geometry","BoxGeometry","material","cube","castShadow","skyColor","groundColor","intensityA","lightA","HemisphereLight","intensity","light","DirectionalLight","console","log","shadow","left","right","top","bottom","directionalLightHelper","DirectionalLightHelper","PointLight","PointLightHelper","addEventListener","onMouseMove","event","preventDefault","clientX","window","innerWidth","clientY","innerHeight","vector","Vector3","unproject","dir","sub","normalize","distance","z","pos","clone","multiplyScalar","copy","resizeRendererToDisplaySize","asas","width","clientWidth","height","clientHeight","needResize","setSize","render","vvvvvv","updateProjectionMatrix","update","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Container, Row, Button, Collapse, } from 'react-bootstrap'\nimport { withRouter, Link } from 'react-router-dom'\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport OBJLoader from \"three-react-obj-loader\";\nimport MTLLoader from 'three-react-mtl-loader';\n// import { MTLLoader, OBJLoader } from 'three-obj-mtl-loader'\n\nfunction ThreeJs(props) {\n    useEffect(() => {\n        var OrbitControls = require('three-orbit-controls')(THREE)\n\n        //點光源必須在外面宣告,這樣滑鼠事件才讀取的到\n        let Plight;\n        //滑鼠位置\n        var mouse = {\n            x: 0,\n            y: 0\n        };\n\n        function main() {\n            const canvas = document.querySelector('#d');\n            //three3d裡面最優先的渲染器\n            const renderer = new THREE.WebGLRenderer({\n                // alpha: true\n                canvas: canvas,\n                //背景透明\n                // alpha: true\n            });\n\n\n            // document.getElementById('#d').appendChild(#d's.domElement)\n            // https://segmentfault.com/a/1190000015330360\n            //https://blog.csdn.net/qq_24013817/article/details/50410433\n            //啟用陰影   陰影需要大量運算，預設為不啟用陰影功能，所以首先繪製器必須啟用陰影功能。\n            renderer.shadowMap.enabled = true;\n\n            //************************以下在做相機 */\n\n            //攝像機視錐體垂直視野角度，從視圖的底部到頂部，以角度來表示。默認值是50。\n            const fov = 45;\n            //攝像機視錐體的長寬比，通常是使用畫布的寬/畫布的高。默認值是1（正方形畫布）。\n            const aspect = 1;  // the canvasA default\n            //攝像機的近端面，默認值是0.1。\n            const near = 0.1;\n            //far（遠面距離）相機到視景體最遠的距離\n            const far = 1000;\n            //創建透視相機\n            let camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n            //透視相機所在的位置 (x,y,z)\n            //紅色,綠色,藍色\n            camera.position.set(0, 18, 12);\n\n            //OrbitControls( object : Camera, domElement : HTMLDOMElement )\n            //object: （必须）将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身。\n            //domElement: 用于事件监听的HTML元素。\n            let controls = new OrbitControls(camera, renderer.domElement);\n            //https://blog.csdn.net/ithanmang/article/details/82735273\n            //https://www.itread01.com/content/1541957413.html\n            //設置相機聚焦點\n            //相機在FUNCTION裡面默認設置為\n            //controls.target = new THREE.Vector3(0, 0, 0);\n            //也就是世界的原點\n            //所以如果想要穿過原點 可以改變參數\n            controls.target.set(0, 0, 0);\n            controls.enableDamping = true // 啟用阻尼效果\n            controls.dampingFactor = 0.25 // 阻尼系數\n            // controls.autoRotate = true // 啟用自動旋轉 --無用\n\n            // 更新控制器。必须在摄像机的变换发生任何手动改变后调用\n            // controls.update();\n\n            //************************以上在做相機 */\n\n            //創建一個新的背景\n            let scene = new THREE.Scene();\n            //設定背景顏色\n            // scene.background = new THREE.Color('white');\n            //建立坐標軸參考\n            let axes = new THREE.AxesHelper(20) // 參數為座標軸長度\n            scene.add(axes)     //-(暫時隱藏)\n\n            {\n                //**********以下整個部分都在做地板 */\n\n                //地板大小\n                //在 texture.repeat.set() 呈現\n                const planeSize = 60;\n                //Creates a new TextureLoader.\n                const loader = new THREE.TextureLoader();\n                // 纹理中图像的平铺，仅有当图像大小（以像素为单位）为2的幂（2、4、8、16、32、64、128、256、512、1024、2048、……）时才起作用。 \n                // 宽度、高度无需相等，但每个维度的长度必须都是2的幂。 这是WebGL中的限制，不是由three.js所限制的。\n                //格子紋路的地板是由下面這行匯入的圖片造成\n                const texture = loader.load('../—Pngtree—hand painted cartoon pikachu red_3969375.png');\n                texture.wrapS = THREE.RepeatWrapping;\n                texture.wrapT = THREE.RepeatWrapping;\n                texture.magFilter = THREE.NearestFilter;\n                //10/2=5 所以地板總共會有5*10個圖案\n                const repeats = planeSize / 2;\n                const repeats1 = planeSize;\n                texture.repeat.set(repeats, repeats1);\n                //此網址有圖解: https://threejs.org/docs/#api/en/geometries/PlaneGeometry\n                const planeGeo = new THREE.PlaneGeometry(planeSize, planeSize);\n                //網址參考:https://threejs.org/docs/#api/en/materials/MeshBasicMaterial\n                //網址參考:https://ithelp.ithome.com.tw/articles/10192953\n                const planeMat = new THREE.MeshPhongMaterial({\n                    //這邊匯入地板材質(指定紋理物件)\n                    // map: texture,                                                        \n                    //如果純粹輸入某種顏色,就使用下面這個方法\n                    color: 0x696969,\n                    //side 材質要渲染到物件的(後/裡)面BackSide或是(正/外)面FrontSite\n                    side: THREE.DoubleSide,\n                });\n                //https://threejs.org/docs/#api/zh/objects/Mesh\n                //new 出一個形狀+外表\n                const mesh = new THREE.Mesh(planeGeo, planeMat);\n                //加上陰影\n                // mesh.castShadow = true;\n                mesh.receiveShadow = true;\n                //地板水平抑或著垂直\n                mesh.rotation.x = Math.PI * -.5;\n                scene.add(mesh);     //-(暫時隱藏)\n            }\n            //**********以上整個部分都在做地板 */\n\n            // 建立物體\n            //創建一個立方體\n            const geometry = new THREE.BoxGeometry(1, 1, 1) // 幾何體\n            //創建材質 MeshPhongMaterial屬於一種材質\n            const material = new THREE.MeshPhongMaterial({ color: 0xfffaaf })\n\n            // 材質\n            let cube = new THREE.Mesh(geometry, material) // 建立網格物件\n            //發出陰影\n            cube.castShadow = true\n            //承受陰影\n            cube.receiveShadow = true\n            cube.position.set(2, 0.5, 10)\n            scene.add(cube)  //-(暫時隱藏)\n\n            // {\n\n            //     //材質模版庫格式（英語：Material Template Library，MTL）是 .OBJ 的配套檔案格式\n            //     const mtlLoader = new MTLLoader();\n            //     //箭頭函式 function(mtl){}\n            //     mtlLoader.load('./Statue/statue1/12328_Statue_v1_L2.mtl', (mtl) => {\n            //         //這行不知道幹嘛用的 不過大家都有 先放著\n            //         mtl.preload();\n            //         const objLoader = new OBJLoader();\n            //         // objLoader.position.set(0, 0, 0)\n            //         objLoader.setMaterials(mtl);\n            //         objLoader.load('./Statue/statue1/12328_Statue_v1_L2.obj', (obj) => {\n\n            //             //雕像尺寸\n            //             // obj.scale.x = .1;\n            //             // obj.scale.y = .1;\n            //             // obj.scale.z = .1;\n            //             //站起來\n            //             obj.rotation.x = -1.5;\n            //             obj.rotation.z = -0.4;\n\n            //             for (mtl in obj.children) {\n            //                 // console.log('5')\n            //                 obj.children[mtl].castShadow = true;\n            //                 obj.children[mtl].receiveShadow = true;\n            //             }\n\n            //             console.log(obj)\n            //             scene.add(obj);\n            //             // root.castShadow = true //無法產生陰影\n            //             //移動雕像位置\n            //             // obj.position.z =0;\n            //             // obj.position.x = 6;\n\n\n            //         });\n            //     });\n\n            //     // obj.children[0].scale.set(2, 2, 2);\n            // }\n\n            /*************************************************** */\n            // let mtlLoader = new MTLLoader();\n\n            // let objLoader = new OBJLoader();\n\n            // mtlLoader.load('./Statue/statue1/12328_Statue_v1_L2.mtl', (materials) => {\n            //     materials.preload()\n            //     console.log(\"loaded Material\");\n            //     objLoader.setMaterials(materials)\n            //     objLoader.load('./Statue/statue1/12328_Statue_v1_L2.obj', (objecta) => {\n            //         scene.add(objecta)\n            //     })\n            // })\n\n\n            {\n                //**********以下都在做光源 */\n\n                const skyColor = 0xB1E1FF;  // light blue\n                const groundColor = 0xB97A20;  // brownish orange\n                const intensityA = 1;\n                //網址參考:https://www.hangge.com/blog/cache/detail_1811.html\n                //HemisphereLight 中文 環境光\n                //THREE.HemisphereLight(天空照射下來的顏色,地面發出光線的顏色,光源照射的強度default=1)\n                const lightA = new THREE.HemisphereLight(skyColor, groundColor, intensityA);\n                // scene.add(lightA);                                                        \n\n                const color = 0xFFffdd;\n                const intensity = 1;\n                //平行光\n                //new THREE.DirectionalLight(color, intensity,distance,decay);\n                const light = new THREE.DirectionalLight(color, intensity);\n                console.log(light)\n                //光源所在的位置\n                light.position.set(-30, 10, 5)\n                // light.target.position.set(20, -20, 0); //-無用\n                //控制照射的範圍\n                light.shadow.camera.near = 5; //产生阴影的最近距离\n                light.shadow.camera.far = 100; //产生阴影的最远距离\n                light.shadow.camera.left = -30; //产生阴影距离位置的最左边位置\n                light.shadow.camera.right = 30; //最右边\n                light.shadow.camera.top = 30; //最上边\n                light.shadow.camera.bottom = -30;\n                //加上陰影\n                light.castShadow = true;\n                // light.target = cube\n                //平行光輔助線\n                let directionalLightHelper = new THREE.DirectionalLightHelper(light)\n                scene.add(directionalLightHelper)\n\n                scene.add(light);\n                scene.add(light.target);\n\n                //----------------------- 點光源\n                Plight = new THREE.PointLight(0xffffff);\n                Plight.position.set(0, 5, 5);\n                Plight.castShadow = true;\n                scene.add(Plight);\n\n                //點光源輔助線\n                let PointLight = new THREE.PointLightHelper(Plight)\n                // scene.add(PointLight)\n\n                document.addEventListener('mousemove', onMouseMove, false);\n            }\n            //**********以上都在做光源 */\n\n            //------以下滑鼠移動 \n            //https://ithelp.ithome.com.tw/articles/10198838\n            function onMouseMove(event) {\n\n                //https://ithelp.ithome.com.tw/articles/10198999\n                // Update the mouse variable\n                console.log(event)\n                event.preventDefault();\n                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n\n                // Make the sphere follow the mouse\n                var vector = new THREE.Vector3(mouse.x, mouse.y, -0.5);\n                vector.unproject(camera);\n                var dir = vector.sub(camera.position).normalize();\n                var distance = -camera.position.z / dir.z;\n                var pos = camera.position.clone().add(dir.multiplyScalar(distance));\n                // console.log(pos);\n\n                Plight.position.copy(new THREE.Vector3(pos.x, pos.y, pos.z + 10));\n            };\n            //------以上滑鼠移動\n\n            //-\n            function resizeRendererToDisplaySize(renderer) {\n                const asas = renderer.domElement;\n                const width = asas.clientWidth;\n                const height = asas.clientHeight;\n                const needResize = asas.width !== width || asas.height !== height;\n                if (needResize) {\n                    renderer.setSize(width, height, false);\n                }\n                return needResize;\n            }\n            //- \n            function render() {\n\n                if (resizeRendererToDisplaySize(renderer)) {\n                    const vvvvvv = renderer.domElement;\n                    camera.aspect = vvvvvv.clientWidth / vvvvvv.clientHeight;\n                    camera.updateProjectionMatrix();\n                }\n                //控制自動旋轉\n                controls.update()\n                renderer.render(scene, camera);\n\n                requestAnimationFrame(render);\n            }\n\n            requestAnimationFrame(render);\n        }\n\n\n        /***************************************************************************** */\n        // var geometry = new THREE.BoxGeometry(1, 1, 1);\n        // var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        // var cube = new THREE.Mesh(geometry, material);\n\n        // scene.add(cube);\n        // camera.position.z = 5;\n\n        // var animate = function () {\n        //     requestAnimationFrame(animate);\n        //     cube.rotation.x += 0.05;\n        //     cube.rotation.y += 0.05;\n        //     renderer.render(scene, camera);\n\n        // };\n\n        // animate();\n        /***************************************************************************** */\n\n        main();\n    }, []);\n\n    return (\n        <><div> <canvas id=\"d\" className=\"threestatus\"></canvas></div></>\n    );\n}\n\nexport default ThreeJs;"]},"metadata":{},"sourceType":"module"}