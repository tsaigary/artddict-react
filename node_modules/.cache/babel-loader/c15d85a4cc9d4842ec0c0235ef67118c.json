{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n * edited by lucascassiano as an ES6 module - http://lucascassiano.github.io\n */\n\n\nvar _three = require('three');\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MTLLoader = function () {\n  function MTLLoader(manager) {\n    _classCallCheck(this, MTLLoader);\n\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to load.\n   */\n\n\n  _createClass(MTLLoader, [{\n    key: 'load',\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text));\n      }, onProgress, onError);\n    }\n    /**\n     * Set base path for resolving references.\n     * If set this path will be prepended to each loaded and found reference.\n     *\n     * @see setTexturePath\n     * @param {String} path\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n\n  }, {\n    key: 'setPath',\n    value: function setPath(path) {\n      this.path = path;\n    }\n    /**\n     * Set base path for resolving texture references.\n     * If set this path will be prepended found texture reference.\n     * If not set and setPath is, it will be used as texture base path.\n     *\n     * @see setPath\n     * @param {String} path\n     *\n     * @example\n     *     mtlLoader.setPath( 'assets/obj/' );\n     *     mtlLoader.setTexturePath( 'assets/textures/' );\n     *     mtlLoader.load( 'my.mtl', ... );\n     */\n\n  }, {\n    key: 'setTexturePath',\n    value: function setTexturePath(path) {\n      this.texturePath = path;\n    }\n  }, {\n    key: 'setBaseUrl',\n    value: function setBaseUrl(path) {\n      console.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');\n      this.setTexturePath(path);\n    }\n  }, {\n    key: 'setCrossOrigin',\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n    }\n  }, {\n    key: 'setMaterialOptions',\n    value: function setMaterialOptions(value) {\n      this.materialOptions = value;\n    }\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {THREE.MTLLoader.MaterialCreator}\n     *\n     * @see setPath setTexturePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setPath and/or setTexturePath explicitly prior to parse.\n     */\n\n  }, {\n    key: 'parse',\n    value: function parse(text) {\n      var lines = text.split('\\n');\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n\n        if (line.length === 0 || line.charAt(0) === '#') {\n          // Blank line or comment ignore\n          continue;\n        }\n\n        var pos = line.indexOf(' ');\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : '';\n        value = value.trim();\n\n        if (key === 'newmtl') {\n          // New material\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else if (info) {\n          if (key === 'ka' || key === 'kd' || key === 'ks') {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n\n      var materialCreator = new MaterialCreator(this.texturePath || this.path, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  }]);\n\n  return MTLLoader;\n}();\n\nvar MaterialCreator = function () {\n  function MaterialCreator(baseUrl, options) {\n    _classCallCheck(this, MaterialCreator);\n\n    this.baseUrl = baseUrl || '';\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n    this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n    this.crossOrigin = 'Anonymous';\n  }\n\n  _createClass(MaterialCreator, [{\n    key: 'setCrossOrigin',\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n    }\n  }, {\n    key: 'setManager',\n    value: function setManager(value) {\n      this.manager = value;\n    }\n  }, {\n    key: 'setMaterials',\n    value: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    }\n  }, {\n    key: 'convert',\n    value: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n\n      for (var mn in materialsInfo) {\n        // Convert materials info into normalized form based on options\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n\n          switch (lprop) {\n            case 'kd':\n            case 'ka':\n            case 'ks':\n              // Diffuse color (color under white light) using RGB values\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                  // ignore\n                  save = false;\n                }\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n\n      return converted;\n    }\n  }, {\n    key: 'preload',\n    value: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    }\n  }, {\n    key: 'getIndex',\n    value: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    }\n  }, {\n    key: 'getAsArray',\n    value: function getAsArray() {\n      var index = 0;\n\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n\n      return this.materialsArray;\n    }\n  }, {\n    key: 'create',\n    value: function create(materialName) {\n      if (this.materials[materialName] === undefined) {\n        this.createMaterial_(materialName);\n      }\n\n      return this.materials[materialName];\n    }\n  }, {\n    key: 'createMaterial_',\n    value: function createMaterial_(materialName) {\n      // Create material\n      var scope = this;\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n\n      function resolveURL(baseUrl, url) {\n        if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n        if (/^https?:\\/\\//i.test(url)) return url;\n        return baseUrl + url;\n      }\n\n      function setMapForType(mapType, value) {\n        if (params[mapType]) return; // Keep the first encountered texture\n\n        var texParams = scope.getTextureParams(value, params);\n        var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n        map.repeat.copy(texParams.scale);\n        map.offset.copy(texParams.offset);\n        map.wrapS = scope.wrap;\n        map.wrapT = scope.wrap;\n        params[mapType] = map;\n      }\n\n      for (var prop in mat) {\n        var value = mat[prop];\n        var n;\n        if (value === '') continue;\n\n        switch (prop.toLowerCase()) {\n          // Ns is material specular exponent\n          case 'kd':\n            // Diffuse color (color under white light) using RGB values\n            params.color = new THREE.Color().fromArray(value);\n            break;\n\n          case 'ks':\n            // Specular color (color when light is reflected from shiny surface) using RGB values\n            params.specular = new THREE.Color().fromArray(value);\n            break;\n\n          case 'map_kd':\n            // Diffuse texture map\n            setMapForType(\"map\", value);\n            break;\n\n          case 'map_ks':\n            // Specular map\n            setMapForType(\"specularMap\", value);\n            break;\n\n          case 'norm':\n            setMapForType(\"normalMap\", value);\n            break;\n\n          case 'map_bump':\n          case 'bump':\n            // Bump texture map\n            setMapForType(\"bumpMap\", value);\n            break;\n\n          case 'ns':\n            // The specular exponent (defines the focus of the specular highlight)\n            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n            params.shininess = parseFloat(value);\n            break;\n\n          case 'd':\n            n = parseFloat(value);\n\n            if (n < 1) {\n              params.opacity = n;\n              params.transparent = true;\n            }\n\n            break;\n\n          case 'tr':\n            n = parseFloat(value);\n\n            if (n > 0) {\n              params.opacity = 1 - n;\n              params.transparent = true;\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n      return this.materials[materialName];\n    }\n  }, {\n    key: 'getTextureParams',\n    value: function getTextureParams(value, matParams) {\n      var texParams = {\n        scale: new THREE.Vector2(1, 1),\n        offset: new THREE.Vector2(0, 0)\n      };\n      var items = value.split(/\\s+/);\n      var pos;\n      pos = items.indexOf('-bm');\n\n      if (pos >= 0) {\n        matParams.bumpScale = parseFloat(items[pos + 1]);\n        items.splice(pos, 2);\n      }\n\n      pos = items.indexOf('-s');\n\n      if (pos >= 0) {\n        texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      pos = items.indexOf('-o');\n\n      if (pos >= 0) {\n        texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4); // we expect 3 parameters here!\n      }\n\n      texParams.url = items.join(' ').trim();\n      return texParams;\n    }\n  }, {\n    key: 'loadTexture',\n    value: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var texture;\n      var loader = THREE.Loader.Handlers.get(url);\n      var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n      if (loader === null) {\n        loader = new THREE.TextureLoader(manager);\n      }\n\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== undefined) texture.mapping = mapping;\n      return texture;\n    }\n  }]);\n\n  return MaterialCreator;\n}();\n\nexports.default = MTLLoader;","map":{"version":3,"sources":["/Users/Gary 1/Desktop/Code stuff/資策會/專題/大專/artddict-react/node_modules/three-react-mtl-loader/lib/index.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_three","require","THREE","_interopRequireWildcard","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","MTLLoader","manager","undefined","DefaultLoadingManager","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","line","trim","charAt","pos","indexOf","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","shininess","opacity","transparent","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAA7C;;AAIA,IAAIC,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,UAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4Bb,MAAAA,MAAM,CAACC,cAAP,CAAsBK,MAAtB,EAA8BI,UAAU,CAACI,GAAzC,EAA8CJ,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUK,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBX,gBAAgB,CAACU,WAAW,CAACG,SAAb,EAAwBF,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBZ,gBAAgB,CAACU,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;AAAqjB;AACrjB;AACA;AACA;AACA;AACA;;;AAGA,IAAII,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,KAAK,GAAGC,uBAAuB,CAACH,MAAD,CAAnC;;AAEA,SAASG,uBAAT,CAAiCC,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIE,MAAM,GAAG,EAAb;;AAAiB,QAAIF,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAK,IAAIT,GAAT,IAAgBS,GAAhB,EAAqB;AAAE,YAAIvB,MAAM,CAACkB,SAAP,CAAiBQ,cAAjB,CAAgCC,IAAhC,CAAqCJ,GAArC,EAA0CT,GAA1C,CAAJ,EAAoDW,MAAM,CAACX,GAAD,CAAN,GAAcS,GAAG,CAACT,GAAD,CAAjB;AAAyB;AAAE;;AAACW,IAAAA,MAAM,CAACG,OAAP,GAAiBL,GAAjB;AAAsB,WAAOE,MAAP;AAAgB;AAAE;;AAE7Q,SAASI,eAAT,CAAyBC,QAAzB,EAAmCf,WAAnC,EAAgD;AAAE,MAAI,EAAEe,QAAQ,YAAYf,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIgB,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,SAAS,GAAG,YAAY;AAC3B,WAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC3BJ,IAAAA,eAAe,CAAC,IAAD,EAAOG,SAAP,CAAf;;AAEA,SAAKC,OAAL,GAAeA,OAAO,KAAKC,SAAZ,GAAwBD,OAAxB,GAAkCZ,KAAK,CAACc,qBAAvD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGC/B,EAAAA,YAAY,CAAC4B,SAAD,EAAY,CAAC;AACxBlB,IAAAA,GAAG,EAAE,MADmB;AAExBX,IAAAA,KAAK,EAAE,SAASiC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,UAA3B,EAAuCC,OAAvC,EAAgD;AAEtD,UAAIC,KAAK,GAAG,IAAZ;AAEA,UAAIC,MAAM,GAAG,IAAIrB,KAAK,CAACsB,UAAV,CAAqB,KAAKV,OAA1B,CAAb;AACAS,MAAAA,MAAM,CAACE,OAAP,CAAe,KAAKC,IAApB;AACAH,MAAAA,MAAM,CAACN,IAAP,CAAYC,GAAZ,EAAiB,UAAUS,IAAV,EAAgB;AAEhCR,QAAAA,MAAM,CAACG,KAAK,CAACM,KAAN,CAAYD,IAAZ,CAAD,CAAN;AACA,OAHD,EAGGP,UAHH,EAGeC,OAHf;AAIA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxB0B,GAAD,EA0BrB;AACF1B,IAAAA,GAAG,EAAE,SADH;AAEFX,IAAAA,KAAK,EAAE,SAASyC,OAAT,CAAiBC,IAAjB,EAAuB;AAC7B,WAAKA,IAAL,GAAYA,IAAZ;AACA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBI,GA1BqB,EA8CrB;AACF/B,IAAAA,GAAG,EAAE,gBADH;AAEFX,IAAAA,KAAK,EAAE,SAAS6C,cAAT,CAAwBH,IAAxB,EAA8B;AAEpC,WAAKI,WAAL,GAAmBJ,IAAnB;AACA;AALC,GA9CqB,EAoDrB;AACF/B,IAAAA,GAAG,EAAE,YADH;AAEFX,IAAAA,KAAK,EAAE,SAAS+C,UAAT,CAAoBL,IAApB,EAA0B;AAEhCM,MAAAA,OAAO,CAACC,IAAR,CAAa,+IAAb;AAEA,WAAKJ,cAAL,CAAoBH,IAApB;AACA;AAPC,GApDqB,EA4DrB;AACF/B,IAAAA,GAAG,EAAE,gBADH;AAEFX,IAAAA,KAAK,EAAE,SAASkD,cAAT,CAAwBlD,KAAxB,EAA+B;AAErC,WAAKmD,WAAL,GAAmBnD,KAAnB;AACA;AALC,GA5DqB,EAkErB;AACFW,IAAAA,GAAG,EAAE,oBADH;AAEFX,IAAAA,KAAK,EAAE,SAASoD,kBAAT,CAA4BpD,KAA5B,EAAmC;AAEzC,WAAKqD,eAAL,GAAuBrD,KAAvB;AACA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBI,GAlEqB,EAqFrB;AACFW,IAAAA,GAAG,EAAE,OADH;AAEFX,IAAAA,KAAK,EAAE,SAAS4C,KAAT,CAAeD,IAAf,EAAqB;AAE3B,UAAIW,KAAK,GAAGX,IAAI,CAACY,KAAL,CAAW,IAAX,CAAZ;AACA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAIC,aAAa,GAAG,EAApB;;AAEA,WAAK,IAAIrD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,KAAK,CAAChD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAEtC,YAAIsD,IAAI,GAAGL,KAAK,CAACjD,CAAD,CAAhB;AACAsD,QAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,EAAP;;AAEA,YAAID,IAAI,CAACrD,MAAL,KAAgB,CAAhB,IAAqBqD,IAAI,CAACE,MAAL,CAAY,CAAZ,MAAmB,GAA5C,EAAiD;AAEhD;AACA;AACA;;AAED,YAAIC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAa,GAAb,CAAV;AAEA,YAAIpD,GAAG,GAAGmD,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBF,GAAlB,CAAX,GAAoCH,IAA9C;AACAhD,QAAAA,GAAG,GAAGA,GAAG,CAACsD,WAAJ,EAAN;AAEA,YAAIjE,KAAK,GAAG8D,GAAG,IAAI,CAAP,GAAWH,IAAI,CAACK,SAAL,CAAeF,GAAG,GAAG,CAArB,CAAX,GAAqC,EAAjD;AACA9D,QAAAA,KAAK,GAAGA,KAAK,CAAC4D,IAAN,EAAR;;AAEA,YAAIjD,GAAG,KAAK,QAAZ,EAAsB;AAErB;AAEA6C,UAAAA,IAAI,GAAG;AAAEU,YAAAA,IAAI,EAAElE;AAAR,WAAP;AACA0D,UAAAA,aAAa,CAAC1D,KAAD,CAAb,GAAuBwD,IAAvB;AACA,SAND,MAMO,IAAIA,IAAJ,EAAU;AAEhB,cAAI7C,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,IAAxB,IAAgCA,GAAG,KAAK,IAA5C,EAAkD;AAEjD,gBAAIwD,EAAE,GAAGnE,KAAK,CAACuD,KAAN,CAAYE,iBAAZ,EAA+B,CAA/B,CAAT;AACAD,YAAAA,IAAI,CAAC7C,GAAD,CAAJ,GAAY,CAACyD,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAAX,EAAoBC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAA9B,EAAuCC,UAAU,CAACD,EAAE,CAAC,CAAD,CAAH,CAAjD,CAAZ;AACA,WAJD,MAIO;AAENX,YAAAA,IAAI,CAAC7C,GAAD,CAAJ,GAAYX,KAAZ;AACA;AACD;AACD;;AAED,UAAIqE,eAAe,GAAG,IAAIC,eAAJ,CAAoB,KAAKxB,WAAL,IAAoB,KAAKJ,IAA7C,EAAmD,KAAKW,eAAxD,CAAtB;AACAgB,MAAAA,eAAe,CAACnB,cAAhB,CAA+B,KAAKC,WAApC;AACAkB,MAAAA,eAAe,CAACE,UAAhB,CAA2B,KAAKzC,OAAhC;AACAuC,MAAAA,eAAe,CAACG,YAAhB,CAA6Bd,aAA7B;AACA,aAAOW,eAAP;AACA;AApDC,GArFqB,CAAZ,CAAZ;;AA4IA,SAAOxC,SAAP;AACA,CAnKe,EAAhB;;AAqKA,IAAIyC,eAAe,GAAG,YAAY;AACjC,WAASA,eAAT,CAAyBG,OAAzB,EAAkCC,OAAlC,EAA2C;AAC1ChD,IAAAA,eAAe,CAAC,IAAD,EAAO4C,eAAP,CAAf;;AAEA,SAAKG,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKhB,aAAL,GAAqB,EAArB;AACA,SAAKiB,SAAL,GAAiB,EAAjB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AAEA,SAAKC,IAAL,GAAY,KAAKJ,OAAL,IAAgB,KAAKA,OAAL,CAAaI,IAA7B,GAAoC,KAAKJ,OAAL,CAAaI,IAAjD,GAAwD5D,KAAK,CAAC6D,SAA1E;AACA,SAAKC,IAAL,GAAY,KAAKN,OAAL,IAAgB,KAAKA,OAAL,CAAaM,IAA7B,GAAoC,KAAKN,OAAL,CAAaM,IAAjD,GAAwD9D,KAAK,CAAC+D,cAA1E;AACA,SAAK9B,WAAL,GAAmB,WAAnB;AACA;;AAEDlD,EAAAA,YAAY,CAACqE,eAAD,EAAkB,CAAC;AAC9B3D,IAAAA,GAAG,EAAE,gBADyB;AAE9BX,IAAAA,KAAK,EAAE,SAASkD,cAAT,CAAwBlD,KAAxB,EAA+B;AAErC,WAAKmD,WAAL,GAAmBnD,KAAnB;AACA;AAL6B,GAAD,EAM3B;AACFW,IAAAA,GAAG,EAAE,YADH;AAEFX,IAAAA,KAAK,EAAE,SAASuE,UAAT,CAAoBvE,KAApB,EAA2B;AAEjC,WAAK8B,OAAL,GAAe9B,KAAf;AACA;AALC,GAN2B,EAY3B;AACFW,IAAAA,GAAG,EAAE,cADH;AAEFX,IAAAA,KAAK,EAAE,SAASwE,YAAT,CAAsBd,aAAtB,EAAqC;AAE3C,WAAKA,aAAL,GAAqB,KAAKwB,OAAL,CAAaxB,aAAb,CAArB;AACA,WAAKiB,SAAL,GAAiB,EAAjB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACA;AARC,GAZ2B,EAqB3B;AACFlE,IAAAA,GAAG,EAAE,SADH;AAEFX,IAAAA,KAAK,EAAE,SAASkF,OAAT,CAAiBxB,aAAjB,EAAgC;AAEtC,UAAI,CAAC,KAAKgB,OAAV,EAAmB,OAAOhB,aAAP;AAEnB,UAAIyB,SAAS,GAAG,EAAhB;;AAEA,WAAK,IAAIC,EAAT,IAAe1B,aAAf,EAA8B;AAE7B;AAEA,YAAI2B,GAAG,GAAG3B,aAAa,CAAC0B,EAAD,CAAvB;AAEA,YAAIE,MAAM,GAAG,EAAb;AAEAH,QAAAA,SAAS,CAACC,EAAD,CAAT,GAAgBE,MAAhB;;AAEA,aAAK,IAAIC,IAAT,IAAiBF,GAAjB,EAAsB;AAErB,cAAIG,IAAI,GAAG,IAAX;AACA,cAAIxF,KAAK,GAAGqF,GAAG,CAACE,IAAD,CAAf;AACA,cAAIE,KAAK,GAAGF,IAAI,CAACtB,WAAL,EAAZ;;AAEA,kBAAQwB,KAAR;AAEC,iBAAK,IAAL;AACA,iBAAK,IAAL;AACA,iBAAK,IAAL;AAEC;AAEA,kBAAI,KAAKf,OAAL,IAAgB,KAAKA,OAAL,CAAagB,YAAjC,EAA+C;AAE9C1F,gBAAAA,KAAK,GAAG,CAACA,KAAK,CAAC,CAAD,CAAL,GAAW,GAAZ,EAAiBA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAL,GAAW,GAA5C,CAAR;AACA;;AAED,kBAAI,KAAK0E,OAAL,IAAgB,KAAKA,OAAL,CAAaiB,cAAjC,EAAiD;AAEhD,oBAAI3F,KAAK,CAAC,CAAD,CAAL,KAAa,CAAb,IAAkBA,KAAK,CAAC,CAAD,CAAL,KAAa,CAA/B,IAAoCA,KAAK,CAAC,CAAD,CAAL,KAAa,CAArD,EAAwD;AAEvD;AAEAwF,kBAAAA,IAAI,GAAG,KAAP;AACA;AACD;;AAED;;AAED;AAEC;AA3BF;;AA+BA,cAAIA,IAAJ,EAAU;AAETF,YAAAA,MAAM,CAACG,KAAD,CAAN,GAAgBzF,KAAhB;AACA;AACD;AACD;;AAED,aAAOmF,SAAP;AACA;AA/DC,GArB2B,EAqF3B;AACFxE,IAAAA,GAAG,EAAE,SADH;AAEFX,IAAAA,KAAK,EAAE,SAAS4F,OAAT,GAAmB;AAEzB,WAAK,IAAIR,EAAT,IAAe,KAAK1B,aAApB,EAAmC;AAElC,aAAKmC,MAAL,CAAYT,EAAZ;AACA;AACD;AARC,GArF2B,EA8F3B;AACFzE,IAAAA,GAAG,EAAE,UADH;AAEFX,IAAAA,KAAK,EAAE,SAAS8F,QAAT,CAAkBC,YAAlB,EAAgC;AAEtC,aAAO,KAAKlB,UAAL,CAAgBkB,YAAhB,CAAP;AACA;AALC,GA9F2B,EAoG3B;AACFpF,IAAAA,GAAG,EAAE,YADH;AAEFX,IAAAA,KAAK,EAAE,SAASgG,UAAT,GAAsB;AAE5B,UAAIC,KAAK,GAAG,CAAZ;;AAEA,WAAK,IAAIb,EAAT,IAAe,KAAK1B,aAApB,EAAmC;AAElC,aAAKkB,cAAL,CAAoBqB,KAApB,IAA6B,KAAKJ,MAAL,CAAYT,EAAZ,CAA7B;AACA,aAAKP,UAAL,CAAgBO,EAAhB,IAAsBa,KAAtB;AACAA,QAAAA,KAAK;AACL;;AAED,aAAO,KAAKrB,cAAZ;AACA;AAdC,GApG2B,EAmH3B;AACFjE,IAAAA,GAAG,EAAE,QADH;AAEFX,IAAAA,KAAK,EAAE,SAAS6F,MAAT,CAAgBE,YAAhB,EAA8B;AAEpC,UAAI,KAAKpB,SAAL,CAAeoB,YAAf,MAAiChE,SAArC,EAAgD;AAE/C,aAAKmE,eAAL,CAAqBH,YAArB;AACA;;AAED,aAAO,KAAKpB,SAAL,CAAeoB,YAAf,CAAP;AACA;AAVC,GAnH2B,EA8H3B;AACFpF,IAAAA,GAAG,EAAE,iBADH;AAEFX,IAAAA,KAAK,EAAE,SAASkG,eAAT,CAAyBH,YAAzB,EAAuC;AAE7C;AAEA,UAAIzD,KAAK,GAAG,IAAZ;AACA,UAAI+C,GAAG,GAAG,KAAK3B,aAAL,CAAmBqC,YAAnB,CAAV;AACA,UAAII,MAAM,GAAG;AAEZjC,QAAAA,IAAI,EAAE6B,YAFM;AAGZjB,QAAAA,IAAI,EAAE,KAAKA;AAHC,OAAb;;AAOA,eAASsB,UAAT,CAAoB3B,OAApB,EAA6BvC,GAA7B,EAAkC;AAEjC,YAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EAAvC,EAA2C,OAAO,EAAP,CAFV,CAIjC;;AACA,YAAI,gBAAgBmE,IAAhB,CAAqBnE,GAArB,CAAJ,EAA+B,OAAOA,GAAP;AAE/B,eAAOuC,OAAO,GAAGvC,GAAjB;AACA;;AAED,eAASoE,aAAT,CAAuBC,OAAvB,EAAgCvG,KAAhC,EAAuC;AAEtC,YAAImG,MAAM,CAACI,OAAD,CAAV,EAAqB,OAFiB,CAET;;AAE7B,YAAIC,SAAS,GAAGlE,KAAK,CAACmE,gBAAN,CAAuBzG,KAAvB,EAA8BmG,MAA9B,CAAhB;AACA,YAAIO,GAAG,GAAGpE,KAAK,CAACqE,WAAN,CAAkBP,UAAU,CAAC9D,KAAK,CAACmC,OAAP,EAAgB+B,SAAS,CAACtE,GAA1B,CAA5B,CAAV;AAEAwE,QAAAA,GAAG,CAACE,MAAJ,CAAWC,IAAX,CAAgBL,SAAS,CAACM,KAA1B;AACAJ,QAAAA,GAAG,CAACK,MAAJ,CAAWF,IAAX,CAAgBL,SAAS,CAACO,MAA1B;AAEAL,QAAAA,GAAG,CAACM,KAAJ,GAAY1E,KAAK,CAAC0C,IAAlB;AACA0B,QAAAA,GAAG,CAACO,KAAJ,GAAY3E,KAAK,CAAC0C,IAAlB;AAEAmB,QAAAA,MAAM,CAACI,OAAD,CAAN,GAAkBG,GAAlB;AACA;;AAED,WAAK,IAAInB,IAAT,IAAiBF,GAAjB,EAAsB;AAErB,YAAIrF,KAAK,GAAGqF,GAAG,CAACE,IAAD,CAAf;AACA,YAAI2B,CAAJ;AAEA,YAAIlH,KAAK,KAAK,EAAd,EAAkB;;AAElB,gBAAQuF,IAAI,CAACtB,WAAL,EAAR;AAEC;AAEA,eAAK,IAAL;AAEC;AAEAkC,YAAAA,MAAM,CAACgB,KAAP,GAAe,IAAIjG,KAAK,CAACkG,KAAV,GAAkBC,SAAlB,CAA4BrH,KAA5B,CAAf;AAEA;;AAED,eAAK,IAAL;AAEC;AACAmG,YAAAA,MAAM,CAACmB,QAAP,GAAkB,IAAIpG,KAAK,CAACkG,KAAV,GAAkBC,SAAlB,CAA4BrH,KAA5B,CAAlB;AAEA;;AAED,eAAK,QAAL;AAEC;AAEAsG,YAAAA,aAAa,CAAC,KAAD,EAAQtG,KAAR,CAAb;AAEA;;AAED,eAAK,QAAL;AAEC;AAEAsG,YAAAA,aAAa,CAAC,aAAD,EAAgBtG,KAAhB,CAAb;AAEA;;AAED,eAAK,MAAL;AAECsG,YAAAA,aAAa,CAAC,WAAD,EAActG,KAAd,CAAb;AAEA;;AAED,eAAK,UAAL;AACA,eAAK,MAAL;AAEC;AAEAsG,YAAAA,aAAa,CAAC,SAAD,EAAYtG,KAAZ,CAAb;AAEA;;AAED,eAAK,IAAL;AAEC;AACA;AAEAmG,YAAAA,MAAM,CAACoB,SAAP,GAAmBnD,UAAU,CAACpE,KAAD,CAA7B;AAEA;;AAED,eAAK,GAAL;AACCkH,YAAAA,CAAC,GAAG9C,UAAU,CAACpE,KAAD,CAAd;;AAEA,gBAAIkH,CAAC,GAAG,CAAR,EAAW;AAEVf,cAAAA,MAAM,CAACqB,OAAP,GAAiBN,CAAjB;AACAf,cAAAA,MAAM,CAACsB,WAAP,GAAqB,IAArB;AACA;;AAED;;AAED,eAAK,IAAL;AACCP,YAAAA,CAAC,GAAG9C,UAAU,CAACpE,KAAD,CAAd;;AAEA,gBAAIkH,CAAC,GAAG,CAAR,EAAW;AAEVf,cAAAA,MAAM,CAACqB,OAAP,GAAiB,IAAIN,CAArB;AACAf,cAAAA,MAAM,CAACsB,WAAP,GAAqB,IAArB;AACA;;AAED;;AAED;AACC;AAlFF;AAqFA;;AAED,WAAK9C,SAAL,CAAeoB,YAAf,IAA+B,IAAI7E,KAAK,CAACwG,iBAAV,CAA4BvB,MAA5B,CAA/B;AACA,aAAO,KAAKxB,SAAL,CAAeoB,YAAf,CAAP;AACA;AAzIC,GA9H2B,EAwQ3B;AACFpF,IAAAA,GAAG,EAAE,kBADH;AAEFX,IAAAA,KAAK,EAAE,SAASyG,gBAAT,CAA0BzG,KAA1B,EAAiC2H,SAAjC,EAA4C;AAElD,UAAInB,SAAS,GAAG;AAEfM,QAAAA,KAAK,EAAE,IAAI5F,KAAK,CAAC0G,OAAV,CAAkB,CAAlB,EAAqB,CAArB,CAFQ;AAGfb,QAAAA,MAAM,EAAE,IAAI7F,KAAK,CAAC0G,OAAV,CAAkB,CAAlB,EAAqB,CAArB;AAHO,OAAhB;AAOA,UAAIC,KAAK,GAAG7H,KAAK,CAACuD,KAAN,CAAY,KAAZ,CAAZ;AACA,UAAIO,GAAJ;AAEAA,MAAAA,GAAG,GAAG+D,KAAK,CAAC9D,OAAN,CAAc,KAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AAEb6D,QAAAA,SAAS,CAACG,SAAV,GAAsB1D,UAAU,CAACyD,KAAK,CAAC/D,GAAG,GAAG,CAAP,CAAN,CAAhC;AACA+D,QAAAA,KAAK,CAACE,MAAN,CAAajE,GAAb,EAAkB,CAAlB;AACA;;AAEDA,MAAAA,GAAG,GAAG+D,KAAK,CAAC9D,OAAN,CAAc,IAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AAEb0C,QAAAA,SAAS,CAACM,KAAV,CAAgBkB,GAAhB,CAAoB5D,UAAU,CAACyD,KAAK,CAAC/D,GAAG,GAAG,CAAP,CAAN,CAA9B,EAAgDM,UAAU,CAACyD,KAAK,CAAC/D,GAAG,GAAG,CAAP,CAAN,CAA1D;AACA+D,QAAAA,KAAK,CAACE,MAAN,CAAajE,GAAb,EAAkB,CAAlB,EAHa,CAGS;AACtB;;AAEDA,MAAAA,GAAG,GAAG+D,KAAK,CAAC9D,OAAN,CAAc,IAAd,CAAN;;AAEA,UAAID,GAAG,IAAI,CAAX,EAAc;AAEb0C,QAAAA,SAAS,CAACO,MAAV,CAAiBiB,GAAjB,CAAqB5D,UAAU,CAACyD,KAAK,CAAC/D,GAAG,GAAG,CAAP,CAAN,CAA/B,EAAiDM,UAAU,CAACyD,KAAK,CAAC/D,GAAG,GAAG,CAAP,CAAN,CAA3D;AACA+D,QAAAA,KAAK,CAACE,MAAN,CAAajE,GAAb,EAAkB,CAAlB,EAHa,CAGS;AACtB;;AAED0C,MAAAA,SAAS,CAACtE,GAAV,GAAgB2F,KAAK,CAACI,IAAN,CAAW,GAAX,EAAgBrE,IAAhB,EAAhB;AACA,aAAO4C,SAAP;AACA;AAxCC,GAxQ2B,EAiT3B;AACF7F,IAAAA,GAAG,EAAE,aADH;AAEFX,IAAAA,KAAK,EAAE,SAAS2G,WAAT,CAAqBzE,GAArB,EAA0BgG,OAA1B,EAAmC/F,MAAnC,EAA2CC,UAA3C,EAAuDC,OAAvD,EAAgE;AAEtE,UAAI8F,OAAJ;AACA,UAAI5F,MAAM,GAAGrB,KAAK,CAACkH,MAAN,CAAaC,QAAb,CAAsBC,GAAtB,CAA0BpG,GAA1B,CAAb;AACA,UAAIJ,OAAO,GAAG,KAAKA,OAAL,KAAiBC,SAAjB,GAA6B,KAAKD,OAAlC,GAA4CZ,KAAK,CAACc,qBAAhE;;AAEA,UAAIO,MAAM,KAAK,IAAf,EAAqB;AAEpBA,QAAAA,MAAM,GAAG,IAAIrB,KAAK,CAACqH,aAAV,CAAwBzG,OAAxB,CAAT;AACA;;AAED,UAAIS,MAAM,CAACW,cAAX,EAA2BX,MAAM,CAACW,cAAP,CAAsB,KAAKC,WAA3B;AAC3BgF,MAAAA,OAAO,GAAG5F,MAAM,CAACN,IAAP,CAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqCC,OAArC,CAAV;AAEA,UAAI6F,OAAO,KAAKnG,SAAhB,EAA2BoG,OAAO,CAACD,OAAR,GAAkBA,OAAlB;AAE3B,aAAOC,OAAP;AACA;AAnBC,GAjT2B,CAAlB,CAAZ;;AAuUA,SAAO7D,eAAP;AACA,CAxVqB,EAAtB;;AA0VAvE,OAAO,CAAC0B,OAAR,GAAkBI,SAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\noads a Wavefront .mtl file specifying materials\nnauthor angelxuanchang\nedited by lucascassiano as an ES6 module - http://lucascassiano.github.io\nn\n\nvar _three = require('three');\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MTLLoader = function () {\n\tfunction MTLLoader(manager) {\n\t\t_classCallCheck(this, MTLLoader);\n\n\t\tthis.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n\t}\n\n\t/**\n  * Loads and parses a MTL asset from a URL.\n  *\n  * @param {String} url - URL to the MTL file.\n  * @param {Function} [onLoad] - Callback invoked with the loaded object.\n  * @param {Function} [onProgress] - Callback for download progress.\n  * @param {Function} [onError] - Callback for download errors.\n  *\n  * @see setPath setTexturePath\n  *\n  * @note In order for relative texture references to resolve correctly\n  * you must call setPath and/or setTexturePath explicitly prior to load.\n  */\n\n\n\t_createClass(MTLLoader, [{\n\t\tkey: 'load',\n\t\tvalue: function load(url, onLoad, onProgress, onError) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new THREE.FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (text) {\n\n\t\t\t\tonLoad(scope.parse(text));\n\t\t\t}, onProgress, onError);\n\t\t}\n\n\t\t/**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setTexturePath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n\n\t}, {\n\t\tkey: 'setPath',\n\t\tvalue: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t}\n\n\t\t/**\n   * Set base path for resolving texture references.\n   * If set this path will be prepended found texture reference.\n   * If not set and setPath is, it will be used as texture base path.\n   *\n   * @see setPath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setTexturePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n\n\t}, {\n\t\tkey: 'setTexturePath',\n\t\tvalue: function setTexturePath(path) {\n\n\t\t\tthis.texturePath = path;\n\t\t}\n\t}, {\n\t\tkey: 'setBaseUrl',\n\t\tvalue: function setBaseUrl(path) {\n\n\t\t\tconsole.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');\n\n\t\t\tthis.setTexturePath(path);\n\t\t}\n\t}, {\n\t\tkey: 'setCrossOrigin',\n\t\tvalue: function setCrossOrigin(value) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t}\n\t}, {\n\t\tkey: 'setMaterialOptions',\n\t\tvalue: function setMaterialOptions(value) {\n\n\t\t\tthis.materialOptions = value;\n\t\t}\n\n\t\t/**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to parse.\n   */\n\n\t}, {\n\t\tkey: 'parse',\n\t\tvalue: function parse(text) {\n\n\t\t\tvar lines = text.split('\\n');\n\t\t\tvar info = {};\n\t\t\tvar delimiter_pattern = /\\s+/;\n\t\t\tvar materialsInfo = {};\n\n\t\t\tfor (var i = 0; i < lines.length; i++) {\n\n\t\t\t\tvar line = lines[i];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif (line.length === 0 || line.charAt(0) === '#') {\n\n\t\t\t\t\t// Blank line or comment ignore\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar pos = line.indexOf(' ');\n\n\t\t\t\tvar key = pos >= 0 ? line.substring(0, pos) : line;\n\t\t\t\tkey = key.toLowerCase();\n\n\t\t\t\tvar value = pos >= 0 ? line.substring(pos + 1) : '';\n\t\t\t\tvalue = value.trim();\n\n\t\t\t\tif (key === 'newmtl') {\n\n\t\t\t\t\t// New material\n\n\t\t\t\t\tinfo = { name: value };\n\t\t\t\t\tmaterialsInfo[value] = info;\n\t\t\t\t} else if (info) {\n\n\t\t\t\t\tif (key === 'ka' || key === 'kd' || key === 'ks') {\n\n\t\t\t\t\t\tvar ss = value.split(delimiter_pattern, 3);\n\t\t\t\t\t\tinfo[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinfo[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar materialCreator = new MaterialCreator(this.texturePath || this.path, this.materialOptions);\n\t\t\tmaterialCreator.setCrossOrigin(this.crossOrigin);\n\t\t\tmaterialCreator.setManager(this.manager);\n\t\t\tmaterialCreator.setMaterials(materialsInfo);\n\t\t\treturn materialCreator;\n\t\t}\n\t}]);\n\n\treturn MTLLoader;\n}();\n\nvar MaterialCreator = function () {\n\tfunction MaterialCreator(baseUrl, options) {\n\t\t_classCallCheck(this, MaterialCreator);\n\n\t\tthis.baseUrl = baseUrl || '';\n\t\tthis.options = options;\n\t\tthis.materialsInfo = {};\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t\tthis.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n\t\tthis.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n\t\tthis.crossOrigin = 'Anonymous';\n\t}\n\n\t_createClass(MaterialCreator, [{\n\t\tkey: 'setCrossOrigin',\n\t\tvalue: function setCrossOrigin(value) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t}\n\t}, {\n\t\tkey: 'setManager',\n\t\tvalue: function setManager(value) {\n\n\t\t\tthis.manager = value;\n\t\t}\n\t}, {\n\t\tkey: 'setMaterials',\n\t\tvalue: function setMaterials(materialsInfo) {\n\n\t\t\tthis.materialsInfo = this.convert(materialsInfo);\n\t\t\tthis.materials = {};\n\t\t\tthis.materialsArray = [];\n\t\t\tthis.nameLookup = {};\n\t\t}\n\t}, {\n\t\tkey: 'convert',\n\t\tvalue: function convert(materialsInfo) {\n\n\t\t\tif (!this.options) return materialsInfo;\n\n\t\t\tvar converted = {};\n\n\t\t\tfor (var mn in materialsInfo) {\n\n\t\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\t\tvar mat = materialsInfo[mn];\n\n\t\t\t\tvar covmat = {};\n\n\t\t\t\tconverted[mn] = covmat;\n\n\t\t\t\tfor (var prop in mat) {\n\n\t\t\t\t\tvar save = true;\n\t\t\t\t\tvar value = mat[prop];\n\t\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\t\tswitch (lprop) {\n\n\t\t\t\t\t\tcase 'kd':\n\t\t\t\t\t\tcase 'ka':\n\t\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\t\tif (this.options && this.options.normalizeRGB) {\n\n\t\t\t\t\t\t\t\tvalue = [value[0] / 255, value[1] / 255, value[2] / 255];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (this.options && this.options.ignoreZeroRGBs) {\n\n\t\t\t\t\t\t\t\tif (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n\n\t\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\t\tsave = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (save) {\n\n\t\t\t\t\t\tcovmat[lprop] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn converted;\n\t\t}\n\t}, {\n\t\tkey: 'preload',\n\t\tvalue: function preload() {\n\n\t\t\tfor (var mn in this.materialsInfo) {\n\n\t\t\t\tthis.create(mn);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getIndex',\n\t\tvalue: function getIndex(materialName) {\n\n\t\t\treturn this.nameLookup[materialName];\n\t\t}\n\t}, {\n\t\tkey: 'getAsArray',\n\t\tvalue: function getAsArray() {\n\n\t\t\tvar index = 0;\n\n\t\t\tfor (var mn in this.materialsInfo) {\n\n\t\t\t\tthis.materialsArray[index] = this.create(mn);\n\t\t\t\tthis.nameLookup[mn] = index;\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\treturn this.materialsArray;\n\t\t}\n\t}, {\n\t\tkey: 'create',\n\t\tvalue: function create(materialName) {\n\n\t\t\tif (this.materials[materialName] === undefined) {\n\n\t\t\t\tthis.createMaterial_(materialName);\n\t\t\t}\n\n\t\t\treturn this.materials[materialName];\n\t\t}\n\t}, {\n\t\tkey: 'createMaterial_',\n\t\tvalue: function createMaterial_(materialName) {\n\n\t\t\t// Create material\n\n\t\t\tvar scope = this;\n\t\t\tvar mat = this.materialsInfo[materialName];\n\t\t\tvar params = {\n\n\t\t\t\tname: materialName,\n\t\t\t\tside: this.side\n\n\t\t\t};\n\n\t\t\tfunction resolveURL(baseUrl, url) {\n\n\t\t\t\tif (typeof url !== 'string' || url === '') return '';\n\n\t\t\t\t// Absolute URL\n\t\t\t\tif (/^https?:\\/\\//i.test(url)) return url;\n\n\t\t\t\treturn baseUrl + url;\n\t\t\t}\n\n\t\t\tfunction setMapForType(mapType, value) {\n\n\t\t\t\tif (params[mapType]) return; // Keep the first encountered texture\n\n\t\t\t\tvar texParams = scope.getTextureParams(value, params);\n\t\t\t\tvar map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n\n\t\t\t\tmap.repeat.copy(texParams.scale);\n\t\t\t\tmap.offset.copy(texParams.offset);\n\n\t\t\t\tmap.wrapS = scope.wrap;\n\t\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\t\tparams[mapType] = map;\n\t\t\t}\n\n\t\t\tfor (var prop in mat) {\n\n\t\t\t\tvar value = mat[prop];\n\t\t\t\tvar n;\n\n\t\t\t\tif (value === '') continue;\n\n\t\t\t\tswitch (prop.toLowerCase()) {\n\n\t\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\t\tcase 'kd':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tparams.color = new THREE.Color().fromArray(value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\t\tparams.specular = new THREE.Color().fromArray(value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\t\tsetMapForType(\"map\", value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t\t// Specular map\n\n\t\t\t\t\t\tsetMapForType(\"specularMap\", value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'norm':\n\n\t\t\t\t\t\tsetMapForType(\"normalMap\", value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'map_bump':\n\t\t\t\t\tcase 'bump':\n\n\t\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\t\tsetMapForType(\"bumpMap\", value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ns':\n\n\t\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\t\tparams.shininess = parseFloat(value);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tn = parseFloat(value);\n\n\t\t\t\t\t\tif (n < 1) {\n\n\t\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'tr':\n\t\t\t\t\t\tn = parseFloat(value);\n\n\t\t\t\t\t\tif (n > 0) {\n\n\t\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\t\tparams.transparent = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.materials[materialName] = new THREE.MeshPhongMaterial(params);\n\t\t\treturn this.materials[materialName];\n\t\t}\n\t}, {\n\t\tkey: 'getTextureParams',\n\t\tvalue: function getTextureParams(value, matParams) {\n\n\t\t\tvar texParams = {\n\n\t\t\t\tscale: new THREE.Vector2(1, 1),\n\t\t\t\toffset: new THREE.Vector2(0, 0)\n\n\t\t\t};\n\n\t\t\tvar items = value.split(/\\s+/);\n\t\t\tvar pos;\n\n\t\t\tpos = items.indexOf('-bm');\n\n\t\t\tif (pos >= 0) {\n\n\t\t\t\tmatParams.bumpScale = parseFloat(items[pos + 1]);\n\t\t\t\titems.splice(pos, 2);\n\t\t\t}\n\n\t\t\tpos = items.indexOf('-s');\n\n\t\t\tif (pos >= 0) {\n\n\t\t\t\ttexParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n\t\t\t\titems.splice(pos, 4); // we expect 3 parameters here!\n\t\t\t}\n\n\t\t\tpos = items.indexOf('-o');\n\n\t\t\tif (pos >= 0) {\n\n\t\t\t\ttexParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n\t\t\t\titems.splice(pos, 4); // we expect 3 parameters here!\n\t\t\t}\n\n\t\t\ttexParams.url = items.join(' ').trim();\n\t\t\treturn texParams;\n\t\t}\n\t}, {\n\t\tkey: 'loadTexture',\n\t\tvalue: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n\n\t\t\tvar texture;\n\t\t\tvar loader = THREE.Loader.Handlers.get(url);\n\t\t\tvar manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n\t\t\tif (loader === null) {\n\n\t\t\t\tloader = new THREE.TextureLoader(manager);\n\t\t\t}\n\n\t\t\tif (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n\t\t\ttexture = loader.load(url, onLoad, onProgress, onError);\n\n\t\t\tif (mapping !== undefined) texture.mapping = mapping;\n\n\t\t\treturn texture;\n\t\t}\n\t}]);\n\n\treturn MaterialCreator;\n}();\n\nexports.default = MTLLoader;"]},"metadata":{},"sourceType":"script"}