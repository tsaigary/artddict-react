{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuctionCountDown = () => {\n  _s();\n\n  const data = ['2021-07-24 12:00:00', '2021-07-30 00:00:00', '2021-08-06 00:00:00', '2021-08-10 00:00:00'];\n  const [count, setCount] = useState(0);\n  const [aucRemainT, setAucRemainT] = useState([]); //將時間設定為毫秒\n\n  const TimeRemaining = deadline => {\n    //截止時間(毫秒)\n    // 將資料拿到資料庫截止日期 從字串轉換成數字\n    const deadlineMin = parseInt(deadline); //現在時間(毫秒)\n\n    const timeRightNow = new Date().getTime();\n    const TimeRemaining = deadlineMin - timeRightNow;\n    const seconds = Math.floor(TimeRemaining / 1000 % 60);\n    const minutes = Math.floor(TimeRemaining / 1000 / 60 % 60);\n    const hours = Math.floor(TimeRemaining / (1000 * 60 * 60) % 24);\n    const days = Math.floor(TimeRemaining / (1000 * 60 * 60 * 24)); // console.log(days, \"天\", hours, '小時', minutes, '分鐘', seconds, '秒')\n\n    if (TimeRemaining < 0) {\n      return '競標結束';\n    } else {\n      return `${days}天 ${hours}小時 ${minutes}分鐘 ${seconds}秒`;\n    }\n  }; //每秒重新去渲染時間\n\n\n  useEffect(() => {\n    let remainTime = []; //把所有deadline取出來計算剩餘時間\n\n    if (data.length > 0) {\n      for (let i = 0; i < data.length; i++) {\n        let deadlineA = new Date(data[i]).getTime();\n        remainTime.push(TimeRemaining(deadlineA));\n      }\n\n      setAucRemainT(remainTime); //console.log(remainTime) //value exist\n      //console.log(aucRemainT) //value exist\n    }\n\n    let test = setInterval(() => {\n      setCount(count => count + 1);\n    }, 1000); //console.log('+++++++++++++++++++++++', count)\n\n    return () => clearInterval(test);\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: aucRemainT[0]\n  }, void 0, false);\n};\n\n_s(AuctionCountDown, \"1kfVt/1H/7yY07aB4c9xZDg7V7I=\");\n\n_c = AuctionCountDown;\nexport default _c2 = withRouter(AuctionCountDown);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuctionCountDown\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Gary 1/Desktop/Code stuff/資策會/專題/大專/artddict-react/src/pages/cart/components/AuctionCountDown.js"],"names":["React","useEffect","useState","Link","withRouter","AuctionCountDown","data","count","setCount","aucRemainT","setAucRemainT","TimeRemaining","deadline","deadlineMin","parseInt","timeRightNow","Date","getTime","seconds","Math","floor","minutes","hours","days","remainTime","length","i","deadlineA","push","test","setInterval","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,IAAI,GAAG,CACX,qBADW,EAEX,qBAFW,EAGX,qBAHW,EAIX,qBAJW,CAAb;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C,CAR6B,CAU7B;;AACA,QAAMS,aAAa,GAAIC,QAAD,IAAc;AAClC;AACA;AACA,UAAMC,WAAW,GAAGC,QAAQ,CAACF,QAAD,CAA5B,CAHkC,CAIlC;;AACA,UAAMG,YAAY,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAArB;AAEA,UAAMN,aAAa,GAAGE,WAAW,GAAGE,YAApC;AAEA,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYT,aAAa,GAAG,IAAjB,GAAyB,EAApC,CAAhB;AACA,UAAMU,OAAO,GAAGF,IAAI,CAACC,KAAL,CACbT,aAAa,GAAG,IAAhB,GAAuB,EAAxB,GAA8B,EADhB,CAAhB;AAGA,UAAMW,KAAK,GAAGH,IAAI,CAACC,KAAL,CACXT,aAAa,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAd,GAAqC,EADzB,CAAd;AAGA,UAAMY,IAAI,GAAGJ,IAAI,CAACC,KAAL,CACXT,aAAa,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CADF,CAAb,CAhBkC,CAmBlC;;AACA,QAAIA,aAAa,GAAG,CAApB,EAAuB;AACrB,aAAO,MAAP;AACD,KAFD,MAEO;AACL,aAAQ,GAAEY,IAAK,KAAID,KAAM,MAAKD,OAAQ,MAAKH,OAAQ,GAAnD;AACD;AACF,GAzBD,CAX6B,CAsC7B;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,UAAU,GAAG,EAAjB,CADc,CAEd;;AACA,QAAIlB,IAAI,CAACmB,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,IAAI,CAACmB,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,YAAIC,SAAS,GAAG,IAAIX,IAAJ,CAASV,IAAI,CAACoB,CAAD,CAAb,EAAkBT,OAAlB,EAAhB;AACAO,QAAAA,UAAU,CAACI,IAAX,CAAgBjB,aAAa,CAACgB,SAAD,CAA7B;AACD;;AAEDjB,MAAAA,aAAa,CAACc,UAAD,CAAb,CANmB,CAOnB;AACA;AACD;;AACD,QAAIK,IAAI,GAAGC,WAAW,CAAC,MAAM;AAC3BtB,MAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACD,KAFqB,EAEnB,IAFmB,CAAtB,CAbc,CAgBd;;AACA,WAAO,MAAMwB,aAAa,CAACF,IAAD,CAA1B;AACD,GAlBQ,EAkBN,CAACtB,KAAD,CAlBM,CAAT;AAoBA,sBAAO;AAAA,cAAGE,UAAU,CAAC,CAAD;AAAb,mBAAP;AACD,CA5DD;;GAAMJ,gB;;KAAAA,gB;AA8DN,qBAAeD,UAAU,CAACC,gBAAD,CAAzB","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\n\nconst AuctionCountDown = () => {\n  const data = [\n    '2021-07-24 12:00:00',\n    '2021-07-30 00:00:00',\n    '2021-08-06 00:00:00',\n    '2021-08-10 00:00:00',\n  ]\n  const [count, setCount] = useState(0)\n  const [aucRemainT, setAucRemainT] = useState([])\n\n  //將時間設定為毫秒\n  const TimeRemaining = (deadline) => {\n    //截止時間(毫秒)\n    // 將資料拿到資料庫截止日期 從字串轉換成數字\n    const deadlineMin = parseInt(deadline)\n    //現在時間(毫秒)\n    const timeRightNow = new Date().getTime()\n\n    const TimeRemaining = deadlineMin - timeRightNow\n\n    const seconds = Math.floor((TimeRemaining / 1000) % 60)\n    const minutes = Math.floor(\n      (TimeRemaining / 1000 / 60) % 60\n    )\n    const hours = Math.floor(\n      (TimeRemaining / (1000 * 60 * 60)) % 24\n    )\n    const days = Math.floor(\n      TimeRemaining / (1000 * 60 * 60 * 24)\n    )\n    // console.log(days, \"天\", hours, '小時', minutes, '分鐘', seconds, '秒')\n    if (TimeRemaining < 0) {\n      return '競標結束'\n    } else {\n      return `${days}天 ${hours}小時 ${minutes}分鐘 ${seconds}秒`\n    }\n  }\n\n  //每秒重新去渲染時間\n  useEffect(() => {\n    let remainTime = []\n    //把所有deadline取出來計算剩餘時間\n    if (data.length > 0) {\n      for (let i = 0; i < data.length; i++) {\n        let deadlineA = new Date(data[i]).getTime()\n        remainTime.push(TimeRemaining(deadlineA))\n      }\n\n      setAucRemainT(remainTime)\n      //console.log(remainTime) //value exist\n      //console.log(aucRemainT) //value exist\n    }\n    let test = setInterval(() => {\n      setCount((count) => count + 1)\n    }, 1000)\n    //console.log('+++++++++++++++++++++++', count)\n    return () => clearInterval(test)\n  }, [count])\n\n  return <>{aucRemainT[0]}</>\n}\n\nexport default withRouter(AuctionCountDown)\n"]},"metadata":{},"sourceType":"module"}