{"ast":null,"code":"var _jsxFileName = \"/Users/Gary 1/Desktop/Code stuff/\\u8CC7\\u7B56\\u6703/\\u5C08\\u984C/\\u5927\\u5C08/artddict-react/src/pages/event/components/tetris/Tetris.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport { createStage, checkCollision } from './gameHelper'; // Styled Component\n\nimport { StyledTetrisWrapper, StyledTetris } from './StyleforTetris/StyledTetris'; // Costom Hooks\n\nimport { usePlayer } from './hooks/usePlayer';\nimport { useStage } from './hooks/useStage';\nimport { useInterval } from './hooks/useInterval';\nimport { useGameStatus } from './hooks/useGameStatus'; // Component\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 83) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1); // Also increase speed\n\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  }; // This one starts the game\n  // Custom hook by Dan Abramov\n\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 65) {\n        movePlayer(-1);\n      } else if (keyCode === 68) {\n        movePlayer(1);\n      } else if (keyCode === 83) {\n        dropPlayer();\n      } else if (keyCode === 87) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: `Score: ${score}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `rows: ${rows}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: `Level: ${level}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tetris, \"uoJ5w4UKuBn8/0a6PO9gLPbz/ZU=\", false, function () {\n  return [usePlayer, useStage, useGameStatus, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["/Users/Gary 1/Desktop/Code stuff/資策會/專題/大專/artddict-react/src/pages/event/components/tetris/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","usePlayer","useStage","useInterval","useGameStatus","Stage","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","console","log","movePlayer","dir","x","y","keyUp","keyCode","startGame","drop","prev","collided","pos","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import { React, useState } from 'react'\n\nimport { createStage, checkCollision } from './gameHelper'\n\n// Styled Component\nimport {\n  StyledTetrisWrapper,\n  StyledTetris,\n} from './StyleforTetris/StyledTetris'\n\n// Costom Hooks\nimport { usePlayer } from './hooks/usePlayer'\nimport { useStage } from './hooks/useStage'\nimport { useInterval } from './hooks/useInterval'\nimport { useGameStatus } from './hooks/useGameStatus'\n\n// Component\nimport Stage from './Stage'\nimport Display from './Display'\nimport StartButton from './StartButton'\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null)\n  const [gameOver, setGameOver] = useState(false)\n\n  const [\n    player,\n    updatePlayerPos,\n    resetPlayer,\n    playerRotate,\n  ] = usePlayer()\n  const [stage, setStage, rowsCleared] = useStage(\n    player,\n    resetPlayer\n  )\n  const [score, setScore, rows, setRows, level, setLevel] =\n    useGameStatus(rowsCleared)\n\n  console.log('re-render')\n\n  const movePlayer = (dir) => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 })\n    }\n  }\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 83) {\n        setDropTime(1000 / (level + 1))\n      }\n    }\n  }\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage())\n    setDropTime(1000)\n    resetPlayer()\n    setScore(0)\n    setLevel(0)\n    setRows(0)\n    setGameOver(false)\n  }\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1)\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200)\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false })\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!')\n        setGameOver(true)\n        setDropTime(null)\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true })\n    }\n  }\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null)\n    drop()\n  }\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop()\n  }, dropTime)\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 65) {\n        movePlayer(-1)\n      } else if (keyCode === 68) {\n        movePlayer(1)\n      } else if (keyCode === 83) {\n        dropPlayer()\n      } else if (keyCode === 87) {\n        playerRotate(stage, 1)\n      }\n    }\n  }\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  )\n}\n\nexport default Tetris\n"]},"metadata":{},"sourceType":"module"}