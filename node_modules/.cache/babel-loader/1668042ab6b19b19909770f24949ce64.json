{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { createStage } from '../gameHelper';\nexport const useStage = (player, resetPlayer) => {\n  _s();\n\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // Then check if we got some score if collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    }; // Here are the updates\n\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"sources":["/Users/Gary 1/Desktop/Code stuff/資策會/專題/大專/artddict-react/src/pages/event/components/tetris/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA;;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AACA,UAAMC,SAAS,GAAIC,QAAD,IAChBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAeC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAApC,MAA2C,CAAC,CAAhD,EAAmD;AACjDP,QAAAA,cAAc,CAAEQ,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CACE,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CADF;AAGA,eAAOR,GAAP;AACD;;AACDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KAVD,EAUG,EAVH,CADF;;AAaA,UAAMU,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAeX,GAAD,IAC7BA,GAAG,CAACW,GAAJ,CAAST,IAAD,IACNA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IADvC,CADe,CAAjB,CAFiC,CAQjC;;AACAZ,MAAAA,MAAM,CAACsB,SAAP,CAAiBC,OAAjB,CAAyB,CAACb,GAAD,EAAMc,CAAN,KAAY;AACnCd,QAAAA,GAAG,CAACa,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACflB,YAAAA,QAAQ,CAACiB,CAAC,GAAGxB,MAAM,CAAC2B,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAG1B,MAAM,CAAC2B,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,EAE5C,GAAEzB,MAAM,CAAC4B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFK,CAA/C;AAID;AACF,SAPD;AAQD,OATD,EATiC,CAmBjC;;AACA,UAAI5B,MAAM,CAAC4B,QAAX,EAAqB;AACnB3B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACD;;AACD,aAAOA,QAAP;AACD,KAzBD,CAfc,CA0Cd;;;AACAJ,IAAAA,QAAQ,CAAEU,IAAD,IAAUM,WAAW,CAACN,IAAD,CAAtB,CAAR;AACD,GA5CQ,EA4CN,CACDb,MAAM,CAAC4B,QADN,EAED5B,MAAM,CAAC2B,GAAP,CAAWD,CAFV,EAGD1B,MAAM,CAAC2B,GAAP,CAAWH,CAHV,EAIDxB,MAAM,CAACsB,SAJN,EAKDrB,WALC,CA5CM,CAAT;AAoDA,SAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACD,CAzDM;;GAAML,Q","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from '../gameHelper'\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage())\n  const [rowsCleared, setRowsCleared] = useState(0)\n\n  useEffect(() => {\n    setRowsCleared(0)\n    const sweepRows = (newStage) =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1)\n          ack.unshift(\n            new Array(newStage[0].length).fill([0, 'clear'])\n          )\n          return ack\n        }\n        ack.push(row)\n        return ack\n      }, [])\n\n    const updateStage = (prevStage) => {\n      // First flush the stage\n      const newStage = prevStage.map((row) =>\n        row.map((cell) =>\n          cell[1] === 'clear' ? [0, 'clear'] : cell\n        )\n      )\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ]\n          }\n        })\n      })\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer()\n        return sweepRows(newStage)\n      }\n      return newStage\n    }\n\n    // Here are the updates\n    setStage((prev) => updateStage(prev))\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ])\n\n  return [stage, setStage, rowsCleared]\n}\n"]},"metadata":{},"sourceType":"module"}